*This is really difficult material that even seasoned programmers occasionally struggle with*
Function declared in global scope and JS doesn't care where it is invoked

(can't put in my own words, perfect explanation)
*The only thing that matters is where they are declared. When we declare a new function, the function asks,
"Where was I created?" The answer to that question is the outer environment (the outer scope) that gets
stored in the new function's scope chain.*

^^^^Lexical Scoping
  -lexical: having to do with words, what matters is where we(programmers) typed out the function declaration
  within our code

EXAMPLE 1
const myVar = 'Foo';

function first () {
  console.log('Inside first()');
  console.log('myVar is currently equal to:', myVar);
}

function second () {
  const myVar = 'Bar';
  first(); #second() is NOT the parent scope of first()
}

second(); => LOG: Inside first()
             LOG: myVar is currently equal to: Foo

-assignment of myVar = 'Bar' isn't visible to first().  second() isn't parent scope of first()
-first() will go to outer scope to match myVar which is 'Foo'
-when called in second(), first() will do the same steps to match variable as if not called in second()
-lexical environment is a synonym of scope
-LEXICAL: having to do with words

EXAMPLE 2
const myVar = 'Foo';

function second () { #second() IS parent scope of first()
  function first () {
    console.log('Inside first()');
    console.log('myVar is currently equal to:', myVar);
  }
  const myVar = 'Bar';
  first();
}

second(); => LOG: Inside first()
             LOG: myVar is currently equal to: Bar

-declare first() within second()
-the outer reference layer will search and match within second()
-therefore myVar is 'Bar'

*LEXICAL SCOPE and SCOPE CHAIN are difficult concepts
*Better understanding comes with practice of writing JS code
*Understanding what's going on under the hood during declaration and invocation is powerful
*This understanding helps debugging less of a pain
