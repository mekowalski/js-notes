When constructor functions are run, it declares new object with new function property
All these function properties of new objects are the same except that they return different values
Declare a function just one time and grant each object made, a reference to THIS function

Protoype is a JavaScript object that can store specific attributes

*separate*
function Person(name, age) {
  this.name = name
  this.age = age
}

*separate*
//moved declaration of function outside constructor function
Person.protoype.sayHello = function() {
  console.log(`Hi there, my name is ${this.name}!`)
}

*separate*
*should not use var*
let malind = new Person('Malind', 27)
malind.sayHello(); => "Hi there, my name is Malind!"

let ryan = new Person('Ryan', 26)
ryan.sayHello(); => 'Hi there, my name is Ryan!'

-Prototype is a JS object, that stores specific attributes
-Every new object instance made has reference to attributes defined on Object function's prototype object
eg:
Person.prototype; => {}

malind.sayHello() == ryan.sayHello()
=> true
*because both instances have a reference to the sayHello() attribute

Each JavaScript object has reference to attributes declared on its constructor's prototype, the exact same
function

Separation of code is best practice
