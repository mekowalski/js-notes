*functional programming in JavaScript, it bears repeating: this is very complicated material!*
Filter is reference of search process through an array

const users = [
  {
    firstName: 'Kristopher',
    lastName: 'Kowalski',
    faveColor: 'Blue',
    faveAnimal: 'Dragon'
  },
  {
    firstName: 'Malind',
    lastName: 'Kowalski',
    faveColor: 'Yellow',
    faveAnimal: 'Turtle'
  },
  {
    firstName: 'Ryan',
    lastName: 'Nikulski',
    faveColor: 'Green',
    faveAnimal: 'Dog'
  },
  {
    firstName: 'Candace',
    lastName: 'White',
    faveColor: 'Red',
    faveAnimal: 'Cat'
  }
]

-Hard code logic created in a custon filter function may seem generic and reusable but it includes too
 much logic and is too specific
 eg:
 function colorFilter(collection, color) {
  for (const user of collection) {
    if (user.favoriteColor === color) {
      console.log(user.firstName);
    }
  }
 }
 colorFilter(users, 'Red'); => LOG: Candace


Separation of concerns is nice and important
filter() delegates comparison and trusts method will correctly return true or false
function filter (collection) {
  for (const user of collection) {
    if (likesDogs(user)) {
      console.log(user.firstName);
    }
  }
}

function likesDogs(user) {
  return user['faveAnimal'] === 'Dog';
}

filter(users);
LOG: Ryan

PASSING FUNCTIONS
-Can pass functions into other functions, JS functions ARE objects
-They are objects with special hidden code property that can be invoked
eg:
function iReturnThings (thing) {
  return thing;
}

iReturnThings({ firstName: 'Kristopher', lastName: 'Kowalski' });
// => {firstName: "Kristopher", lastName: "Kowalski"}


CALLBACK FUNCTIONS
-Referred when a function is passed into another function that might be invoked later
-Deriving from the function not invoked IMMEDIATELY but called back ad a later point
-Many callback functions are anonymous, not assigned an identifier, it's not necessary to name them(this
may just create a cluster)

-Plus a majority of the time, the callback function is named by the parameter passed in
eg:
function main(cbf) {
  console.log(cbf());
}

main(function() {
  return "After I get passed to the main() function as the only argument, I am stored in the local 'cbf'
  variable"
});
=> LOG: After I get passed to the main() function as the only argument, I am stored in the local 'cbf'
variable
