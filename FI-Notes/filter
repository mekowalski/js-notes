*functional programming in JavaScript, it bears repeating: this is very complicated material!*
Filter is reference of search process through an array

const users = [
  {
    firstName: 'Kristopher',
    lastName: 'Kowalski',
    faveColor: 'Blue',
    faveAnimal: 'Dragon'
  },
  {
    firstName: 'Malind',
    lastName: 'Kowalski',
    faveColor: 'Yellow',
    faveAnimal: 'Turtle'
  },
  {
    firstName: 'Ryan',
    lastName: 'Nikulski',
    faveColor: 'Green',
    faveAnimal: 'Dog'
  },
  {
    firstName: 'Candace',
    lastName: 'White',
    faveColor: 'Red',
    faveAnimal: 'Cat'
  }
]

-Hard code logic created in a custon filter function may seem generic and reusable but it includes too
 much logic and is too specific
 eg:
 function colorFilter(collection, color) {
  for (const user of collection) {
    if (user.favoriteColor === color) {
      console.log(user.firstName);
    }
  }
 }
 colorFilter(users, 'Red'); => LOG: Candace


Separation of concerns is nice and important
filter() delegates comparison and trusts method will correctly return true or false
function filter (collection) {
  for (const user of collection) {
    if (likesDogs(user)) {
      console.log(user.firstName);
    }
  }
}

function likesDogs(user) {
  return user['faveAnimal'] === 'Dog';
}

filter(users);
LOG: Ryan

PASSING FUNCTIONS
-Can pass functions into other functions, JS functions ARE objects
-They are objects with special hidden code property that can be invoked
eg:
function iReturnThings (thing) {
  return thing;
}

iReturnThings({ firstName: 'Kristopher', lastName: 'Kowalski' });
// => {firstName: "Kristopher", lastName: "Kowalski"}


CALLBACK FUNCTIONS
-Referred when a function is passed into another function that might be invoked later
-Deriving from the function not invoked IMMEDIATELY but called back ad a later point
-Many callback functions are anonymous, not assigned an identifier, it's not necessary to name them(this
may just create a cluster)

-Plus a majority of the time, the callback function is named by the parameter passed in
eg:
function main(cbf) {
  console.log(cbf());
}

main(function() {
  return "After I get passed to the main() function as the only argument, I am stored in the local 'cbf'
  variable"
});
=> LOG: After I get passed to the main() function as the only argument, I am stored in the local 'cbf'
variable

-filter() function doesn't know or care about any comparison logic encapsulated in CB function
-It only takes in a collection, a callback and a console.log()


PURE FUNCTIONS
-JS function can be pure or impure
-Pure Function: is repeatedly invoked with same set of arguments, function will always return the same
 results
 -Behavior is predictable, no side-effects

-Impure Functions: return value that is unpredictable and invokes the function that may make network/DB
 calls or alter and objects passed in
 eg:
 function randomMultiplyAndFloor() {
  return Math.floor(Math.random() * 99)
 }
 randomMultiplyAndFloor(); => 8
 randomMultiplyAndFloor(); => 17
 randomMultiplyAndFloor(); => 78

-Pure functions are best practice because:
 1. predictable code is good, makes writing tests for that function simple and easy
 2. pure functions don't have any side effects, making debugging easier
 3. if array was returned from pure functions, debugging process would be linear and well-scoped
 4. if array is modified by impure functions, following data around on a wild chase, combing through each
    impure function and seeing array modifications would be a debugging NIGHTMARE

-Pure take on impure randomMultiplyAndFloor() function
eg:
function multiplyANdFloor(number) {
  return Math.floor(number * 99);
}

const randomNumber = Math.random();

randomNumber; => 0.7206049784780868

multiplyAndFloor(randomNumber); => 71
multiplyAndFloor(randomNumber); => 71
multiplyAndFloor(randomNumber); => 71


-All JS arrays come with their own .filter() method
-.filter() accepts one argument, a CB function that will invoke each element in the array
-If CB return is true, the element is copied into a new array
-If CB return is false, the element is filtered out
 Array.prototype.filter()
