There are two types of relationships for us to choose:
  -many to many: that is, objectA has many objectB's and objectB has many objectA's
  -HasMany & BelongsTo: that is objectA has many objectB's and objectB belongs to objectA

class User {
  constructor(name){
    this.name = name
  }
}

new User('bob')

class Item {
  constructor(name, price){
    this.name = name
    this.price = price
  }
}

//I assume, but not sure, this is supposed to be `new Item('Flatscreen', 400)`
new Item(400)

There is potential that 2 users may have the same name therefore we give the user and ID and each item and ID
let store = {items: [
    {id: 1, price: 2, name: 'red socks', userId: 1},
    {id: 2, price: 7, name: 'blue shirt', userId: 1},
    {id: 3, price: 4, name: 'black tshirt', userId: 2}
    ],
  users: [
    {id: 1, name: 'Cindy'},
    {id: 2, name: 'Billy'},
    {id: 3, name: 'Bobby'}
  ]}

-Assign a variable called Store to a JavaScript Object
-Store object represents all objects initialized and will be used to hold objects


LINKING INSTANCES TO A STORE
Need to assign each item object an ID and the ID should increment each time new item is made

let itemId = 0
class Item {
  constructor(name, price) {
    this.id = ++itemId //increment itemId
    this.name = name
    this.price = price
  }
}

let item = new Item('dress', 56) => Item {id: 1, name: 'dress', price: 56}
let item2 = new Item('skirt', 48) => Item {id: 2, name: 'skirt', price: 48}


Now we need to insert new objects to the store
let store = {items: []} //initializes store with key of items that point to empty array

let itemId = 0

class Item {
  constructor(name, price) {
    this.id = ++itemId
    this.name = name
    this.price = price

    //insert item to store
    store.items.push(this)
  }
}

let item = new Item('dress', 56) => Item {id: 1, name: 'dress', price: 56}
let item2 = new Item('skirt', 48) => Item {id: 2, name: 'skirt', price: 48}

store.items[1] => {id: 2, name: 'skirt', price: 48}


And insert the users to the store
let store = {items: [], users: []} //initializes store with key of items/users pointing to empty arrays

let userId = 0

class User {
  constructor(name) {
    this.id = ++userId
    this.name = name

    //insert user to store
    store.users.push(this)
  }
}

Lastly allow ability to associate user with item
let itemId = 0

class Item {
  constructor(name, price, user) {
    this.id = ++itemId
    this.name = name
    this.price = price
    if(user){
      this.userId = user.id
    }

    //insert item to store
    store.items.push(this)
  }
  setUser(user){
    this.userId = user.id
  }
}

let malind = new User('Malind')
let item = new Item('dress', 56)

store
=> {users: [{id: 1, name: 'Malind'}],
    items: [{id: 1, name: 'dress', price: 56}, userId: 1]}
