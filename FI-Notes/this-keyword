-THIS outside any function refers to Global Object, in browsers it is Window
-THIS inside a object method refers to the object that received the method call
-THIS inside a standalone function will either default to Global Object or be undefined

JavaScript method: a property on an object that points to a function
-Just like writing:
let person = {name: 'malind'} //name property points to value of 'malind'

let person = {
  greet: function() {
    return 'Bonjour!'
  }
}
typeof person.greet; => 'function'

GREET property is a method, we know that when called person.greet() the object receiving the method call
equals person

let person = {
  greet: function() {
    return this
  }
}

typeof person.greet; => 'function'
person.greet() == person; => true
*person.greet() returns THIS, referring to the object that received the method call


WATCHING THIS CHANGE
let person = {
  greet: function() { //set greet() property on Person object to point to same function
    return this
  }
}

person.greet() == person; => true //refers to the Person Object

let greetFunction = person.greet
//assign local variable greetFunction to refer to the function on the Person Object BUT it doesn't refer to
  the Person Object at all
//it has zero knowledge of Person Object, it only points to the function
//therefore not calling the property of the Person Object but invoking function by calling greetFunction

greetFunction == person; => false

person.greet() == person; => true


FUNCTION WITHIN FUNCTIONS
let person = {
  greet: function greeting() {//object has a greet property pointing to greeting function
    function otherFunction() {//when greet is called, declares & invokes otherFunction function
      return this  //then returns THIS
    }
    return otherFunction()  //otherFunction is not a method but a function
  }
}
*Method is a property that points to a function


CALLBACKS
[1, 2, 3].filter(function(element) {
  console.log(this)
  return element%2 == 0
})
=> window
=> window
=> window

Each time callback is invoked, THIS is global
Function is invoked by filter() method
-Can invoke property of the array however the callback function is not called as a property of an Object,
 therefore when THIS is referenced from inside the cb function, THIS refers to the window/global object


ARROW FUNCTIONS
-Arrow functions do not have their own THIS rather uses whatever THIS is defined in its enclosing scope
eg:
let person = {
  greet: function() {
    //this == person
    const otherFn = () => {
      //this == window
      return this
    }
    //otherFn() is invoked returning the function's value of THIS which is window
    return otherFn()
  }
}

person.greet(); => {greet: f}
*the arrow function inside greeting uses THIS from class method which refers to the Person Object

-Strict Mode: methods defined within JS classes preventing certain actions from being taken and throws
 more exceptions
-'use strict': instructs browser to use Strict Mode, which is a reduced and safer feature set of JS
