Statement: unit of code that accomplishes task but doesn't produce value
-Used to hold data: CONST, LET, VAR
-Iterate over data: FOR, FOR...IN, FOR...OF, WHILE
-Control flow of data: IF...ELSE, SWITCH, BREAK
-Debug data: DEBUGGER

Expression: unit of code that produces a value
-Produces data

if (true) { //statement
  6 + 9; //expression
}
-statement itself doesn't produce value: 15
-expression: 6 + 9 produces value
-can't assign IF statement to variable
 eg:
 const myVar 3 + 6
 myVar; => 9

 const myOtherVar = if (true) {3 + 6};
 => Uncaught SyntaxError: Unexpected token (statement keyword)
 -means the keyword is used for creating statements, stop using it as though it's an expression!

-JS program effectively is a series of statements that control, organize and structure a series of
 expressions

FUNCTION EXPRESSIONS
Function declarations declare function in standard way without producing value
-Functions declarations are a type of function in a standard way that doesn't produce value
eg:
function myFunc() {
  //code in here
}

-function keyword is adaptable:
  -function declaration creating new function in memory, not producing value
  -forms new function in memory when first thing in LOC
    => function myFunction() {}

  -function expression creating new function and immediately returns function as a value
  -forms new function and immediately returns function as value when it's placed elsewhere
    => (function () {})

String literals give new strings, array literals give new arrays, object literals give new objects
Function expressions give new functions
'Good morning!' => "Good morning!"

[] => []

{} => {}

(function () {}) => f () {}
-parenthesis around expression are only required if function keyword would otherwise be the first thing in
line of code

FUNCTIONS ARE OBJECTS
-First-class citizen of the JavaScript language
Everything we can do to an object can also be done to a function
  Abilities:
  -function can be assigned to a variable
  const myObj = {};

  const myFunc = function ( {
    return 3 + 6;
  })
  myFunc(); => 9

  -function can be stored in data structure
  -function can be return value of another function
  -function can be passed as argument to another function

Since function (& variable declarations) are already stored during compilation phase, we can refer hoisted
functions before lexical declaration, above where they're written in code
sayHi();

function sayHi () {
  console.log('Hi');
}

Function expressions are not hoisted and ignored during compilation phase therefore only evaluated during
execution phase
sayHello();

const sayHello = function () {
  console.log('Hello');
};
ERROR: Uncaught ReferenceError: sayHello is not defined
*variables declared with CONST aren't hoisted
*storing a function expression in a CONST-declared variable is good default strategy
*intelliegent scoping behavior is provided by CONST


ADDING PROPERTIES TO A FUNCTION
Can add properties to functions then access them
const myFunc = function () {
  return 6 + 9;
};

myFunc.favoriteNumber = 42;
// => 42

console.log("myFunc()'s favorite number is", myFunc.favoriteNumber);
// LOG: myFunc()'s favorite number is 42


PASSING BY REFERENCE
-Like all JS objects, objects are passed by reference
-Storing a reference to location in memory where the function lives
-If new variable is assigned the first variable, the new variable also points to same location in memory
eg:
const original = function() {
  console.log("i'm the original!!!")
}

const copt = original

copy(); => LOG: I'm the original!!!

-If function is modified, the object in memory is changed, therefore every reference of the function will
 see all modifications
 eg:
 copy.newProperty = "I'm a new property"

 original.newProperty; => "I'm a new property"

-If a variable is reassigned to a new function, it will no longer point to the same location in memory
 eg:
 let original = function() {
  console.log("I'm the original!!!")
 }

 const copy = original

 original = function() {
  console.log("I'm a new function!!!")
 }

 copy(); => I'm the original!!!
 original(); => I'm a new function!!!


STORING FUNCTIONS IN AN ARRAY
Can store functions as elements in an array
const arrayOfDogs = [
  {name: 'Caroga'},
  {name: 'Titan'},
  {name: 'Norman'}
];

const arrayOfFunctions = [
  function () {console.log('This'); },
  function () {console.log('is'); },
  function () {console.log('quite'); },
  function () {console.log('intense'); }
];

STORE FUNCTIONS IN OBJECTS
Can store functions as properties of an object
When fucntion is stored in an object, we call it a method
const malind = {
  fullname: 'Malind Evalette Kowalski',
  greet: function(name) {
    console.log(`hey there ${name}, I'm Malind.`);
  },
  currentlyQuoting: functions () {
    console.log('The main focus is about to FEEL the makeup, not seeing it');
  }
};
malind.fullName; => "Malind Evalette Kowalski"
