JavaScript gives mechanisms to construct objects with specific state, with such behavior shared and some data
is different

-Previously class constructors were used to create different objects
-With the objects sharing behavior but varying in data
Each shoe has a different factoryPrice
The marketMultiplier represents varying prices in different markets

class Shoe {
  constructor(name, color, factoryPrice) {
    this.name = name
    this.color = color
    this.factoryPrice = factoryPrice
  }
  retailPrice(marketMultiplier) {
    return marketMultiplier * this.factoryPrice
  }
}
let shoe1 = new Shoe('Espadrilles', 'Ivory', 32)
shoe1 => Shoe {name: "Espadrilles", color: "Ivory" factoryPrice: 32}
shoe1.retailPrice(3.2) => 102.4


In JavaScript you can also create functions that share specific capabilities but change others
To create a function, return a function from another function

function retailPriceMaker(factoryPrice) { //declared function
  return function(marketMultiplier) { //return value is a function itself, takes in an argument
    return marketMultiplier * factoryPrice  //references factoryPrice, in its scope & returns retail price
  }
}

*by invoking the parent function, another function is returned that has its own unique attribute of a
 factoryPrice which is then passes in an argument to retailPriceMaker
*inner function takes in a second argument, marketMultiplier, which examples can be seen from invoking a
 different factoryPrice

typeof retailPriceMaker => "function"


CLOSURE: the attribute that all JavaScript functions have, hold onto the scope that they had when they were
declared
-JS functions can hold onto state the same way objects can because they are first class objects
-Closures make it possible for a function to have "private" variables
eg:
function makeFn() {
    var name = 'Kaleidoscope'
    function displayName() {
        alert(name)
    }
    return displayName
}
*try logging 'name' and it will return undefined
*however calling makeFn() which returns the displayName() function and store that result in a variable

var myFn = makeFn()
*stores the result of 'Kaleidoscope'

myFn() => window alert statement of 'developer.mozilla.org says Kaleidoscope'
*calling this newly defined variable then displays the value within makeFn()


Closures are also used for privacy in JavaScript, impossible to change attribute, it is only readable
We can always change data of an object but attributes are made truly private when using a closure
