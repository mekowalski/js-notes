Map is another common built in array method, transforming every element in an array to another value

[3, 6, 9].map(function(number) {
  return number * number
});
=> (3) [9, 36, 81]

OUR OWN MAP() METHOD
Function needs to accept array we would like to map the values as an argument
MAP() should only care about iterating over collection and letting callback function handle transformations
function map(array, callback) {
  //Iterate over each element in passed-in array with FOR...OF
  for(const element of array)
    //Invoke callback passing in the elements of the array
    callback(element);
}

map([1, 2, 3], function (num) { console.log(num * num); });

Map will return the new values but also should return an entirely new array
Create a new array within the function
function map(array, callback) {
  const newArray = [];

  for(const element of array) {
    //Use push to return calue of each callback invocation into newArray
    newArray.push(callback(element));
  }
  //return new array at end of function
  return newArray;
}

const original = [3, 6, 9, 12];

const newNumbers = map(original, function(number) {
  return number * number
});

newNumbers; => [9, 36, 81, 144]

Can use Object.assign() to create new object, rather then destruct original it's better to practice
nondestructive updating
