Top level functions are the outer scope (global scope)
Upon new function invocation, new scope retains a reference to the out scope in which it was declared
Also have access to variables & functions declared in outer functions

const globalVar = 1;

function firstFunc() {
  const firstVar = 2;

  return firstVar + globalVar;
}
firstFunc(); => 3

-have access to both global & local variable
-const firstVar = 2; is run first, creates new variable
-JS engine reaches second LOC return firstVar & is 100% go with local variable
-JS engine reaches 2nd part of LOC globalVar & is unfamiliar
-When engine can't find local match it looks in global cope & finds a match that way
-This is access to scope-chain

*What matters for the scope chain is where the function is declared â€” not where it is invoked.*
*Scope chain is scopes, all the way down*
*Scope chain goes in 1 direction, outer scope doesn't have access to things declared in inner scopes

-With functions nested in functions in functions, each new level creates a new scope that can reference
 functions and variables declared in outer scopes through SCOPE CHAIN
 eg:
 const globalVar = 1;

 function firstFunc() {
   const firstVar = 2;

   function secondFunc() {
     const secondVar = 3;

     return secondVar + firstVar + globalVar;
   }
   const resultFromSecondFunc = secondFunc();

   return resultFromSecondFunc;
 }
 firstFunc(); => 6

*Two or more functions declared in same scope DO NOT have access to anything in the other's scope
 eg:
 const fruit = 'apple' #both functions have access to fruit

 function one() {
  const veggie = 'carrot'

  console.log('fruit:', fruit)
  console.log('veggie:', veggie)
  console.log('seafood:', seafood) #function one can't access seafood from function two
 }

 function two() {
  const seafood = 'oyster'

  console.log('fruit:', fruit)
  console.log('veggie:', veggie) #function two can't access veggie from function one
  console.log('seafood:', seafood)
 }

IDENTIFIERS
Identifiers allow us to identify the variable or function we're referring to
eg: const, function, let, return, etc

Compilation Phase: when the engine steps into our code line by line
Execution Phase: runs our code after compilation phase, assigning variables a value and invoking functions
